import pandas as pd
import numpy as np

'''                                             <<< Dataframe >>>

    Dataframe — это табличная структура данных, напоминающая таблицы из Microsoft Excel. Ее главная задача — позволить 
использовать многомерные Series. Dataframe состоит из упорядоченной коллекции колонок, каждая из которых содержит 
значение разных типов (числовое, строковое, булевое и так далее).
В отличие от Series у которого есть массив индексов с метками, ассоциированных с каждым из элементов, Dataframe имеет 
сразу два таких. Первый ассоциирован со строками (рядами) и напоминает таковой из Series. Каждая метка ассоциирована со 
всеми значениями в ряду. Второй содержит метки для каждой из колонок.

    Dataframe можно воспринимать как dict, состоящий из Series, где ключи — названия колонок, а значения — объекты 
Series, которые формируют колонки самого объекта Dataframe. Наконец, все элементы в каждом объекте Series связаны в 
соответствии с массивом меток, называемым index.'''

'''                                          ● Создание Dataframe
    
    Простейший способ создания Dataframe — передать объект dict в конструктор DataFrame(). Объект dict содержит ключ для
 каждой колонки, которую требуется определить, а также массив значений для них.'''

data = {'Цвет': ['синий', 'зеленый', 'желтый', 'красный', 'белый'],
        'Объект': ['мяч', 'ручка', 'карандаш', 'бумага', 'кружка'],
        'Цена': [1.2, 1.0, 0.6, 0.9, 1.7]}
frame = pd.DataFrame(data)
print(f'\n>>>Вывод DataFrame:\n{frame}')

''' Если объект dict содержит больше данных, чем требуется, можно сделать выборку. Для этого в конструкторе Dataframe 
нужно определить последовательность колонок с помощью параметра column. Колонки будут созданы в заданном порядке вне 
зависимости от того, как они расположены в объекте dict.'''

frame2 = pd.DataFrame(data, columns=['Объект', 'Цена'])
print(f'\n>>>Вывод выборки:\n{frame2}')

''' Теперь, зная о параметрах index и columns, проще использовать другой способ определения Dataframe. Вместо 
использования объекта dict можно определить три аргумента в конструкторе в следующем порядке: матрицу данных, массив 
значений для параметра index и массив с названиями колонок для параметра columns.
    В большинстве случаев простейший способ создать матрицу значений — использовать np.arrange(16).reshape((4,4)). 
Это формирует матрицу размером 4х4 из чисел от 0 до 15.'''

frame3 = pd.DataFrame(np.arange(16).reshape((4, 4)),
                      index=['красный', 'синий', 'желтый', 'белый'],
                      columns=['мяч', 'ручка', 'карандаш', 'бумага'])

print(f'\n>>>Создание DataFrame матрицей:\n{frame3}')

'''                                             ● Выбор элементов

    Если нужно узнать названия всех колонок Dataframe, можно вызвать атрибут columns для экземпляра объекта:'''

print(f'\n>>>Названия всех колонок:\n{frame3.columns}')

''' То же можно проделать и для получения списка индексов:'''

print(f'\n>>>Название всех индексов:\n{frame3.index}')

''' Весь же набор данных можно получить с помощью атрибута values:'''

print(f'\n>>>Весь набор данных:\n{frame.values}')

''' Указав в квадратных скобках название колонки, можно получить значений в ней:'''

print(f'\n>>>Значения колонки:\n{frame3["мяч"]}')

''' Возвращаемое значение — объект Series. Название колонки можно использовать и в качестве атрибута:'''

print(f'\n>>>Название колноки в качестве атрибута:\n{frame3.мяч}')

''' Для строк внутри Dataframe используется атрибут loc со значением индекса нужной строки:'''

print('\n>>>Значения нужной строки:')
print(frame3.loc['красный'])  # Возвращаемый объект — это снова Series, где названия колонок — это уже метки массива
# индексов, а значения — данные Series
# если нужно обратиться к строке по индексу, даже если индексы были изменены на строчные используется атрибут iloc

''' Для выбора нескольких строк можно указать массив с их последовательностью:'''

print('\n>>>Выбор нескольких строк:')
print(frame3.loc[['красный', 'желтый']])

''' Если необходимо извлечь часть Dataframe с конкретными строками, для этого можно использовать номера индексов
(в виде среза). 
Она выведет данные из соответствующей строки и названия колонок.'''

print('\n>>>Часть Dataframe срезом:')
print(frame3[2:])

''' Наконец, если необходимо получить одно значение из объекта, сперва нужно указать название колонки, 
а потом — индекс или метку строки:'''

print('\n>>>Получаем одно значение из объекта:')
print(frame3['мяч']['желтый'])

'''Для получения первых n строк датасета используется метод head(n). По умолчанию возвращается 5 первых строк
Для получения последних n строк используется метод tail(n). По умолчанию возвращается 5 последних строк'''

'''                                      ● Присваивание и замена значений

    Разобравшись с логикой получения доступа к разным элементам Dataframe, можно следовать ей же для добавления новых или 
изменения уже существующих значений.
    Например, в структуре Dataframe массив индексов определен атрибутом index, а строка с названиями колонок — columns. 
Можно присвоить метку с помощью атрибута name для этих двух подструктур, чтобы идентифицировать их'''

frame3.index.name = 'цвет:'
frame3.columns.name = 'предметы:'
print('\n>>>Присвоение меток для индексов и колонок:')
print(frame3)

''' Одна из главных особенностей структур данных pandas — их гибкость. Можно вмешаться на любом уровне для изменения 
внутренней структуры данных. Например, добавление новой колонки — крайне распространенная операция.
Ее можно выполнить, присвоив значение экземпляру Dataframe и определив новое имя колонки.'''

frame3['new'] = 0
print('\n>>>Добавление новой колонки:')
print(frame3)

''' Для обновления значений можно использовать массив:'''
frame3['new'] = [2, 1, 2.2, 0.8]
print('\n>>>Обновление значений новой колонки:')
print(frame3)

''' Для изменения одного значения нужно лишь выбрать элемент и присвоить ему новое значение'''

frame3['new']['синий'] = 3
print(f'\nИзменение одного значения:\n{frame3}')
# Python выдает предупреждение, что сложно предсказать, вернет ли он оригинал или копию
# Это зависит от расположения памяти массива, о котором pandas не дает никаких гарантий!

'''                                        ● Вхождение значений

    Функция isin() используется с объектами Series для определения вхождения значений в колонку. Она же подходит и для 
объектов Dataframe.
'''
print(f"\nОпределение вхождения:\n{frame3.isin([6, 'карандаш'])}")

''' Возвращается Dataframe с булевыми значениями, где True указывает на те значения, где членство подтверждено. 
Если передать это значение в виде условия, тогда вернется Dataframe, где будут только значения, удовлетворяющие условию.
'''
print(f"\n{frame3[frame3.isin([6, 'карандаш'])]}")

'''                                        ● Удаление колонки

    Для удаления целой колонки и всего ее содержимого используется команда del:'''

del frame3['new']
print(f"\nУдаление целой колонки:\n{frame3}")

'''                                         ● Фильтрация

    Даже для Dataframe можно применять фильтры, используя определенные условия. Например, вам нужно получить все значения 
меньше определенного числа (допустим, 5) '''

print(f"\nФильтрация:\n{frame3[frame3 < 5]}")
#  Результатом будет Dataframe со значениями меньше 5 на своих местах. На месте остальных будет NaN.

'''                                         ● Dataframe из вложенного словаря

    Эта структура данных, будучи переданной в качестве аргумента в DataFrame(), интерпретируется pandas так, что внешние 
ключи становятся названиями колонок, а внутренние — метками индексов.
    При интерпретации вложенной структуры возможно такое, что не все поля будут совпадать. pandas компенсирует это 
несоответствие, добавляя NaN на место недостающих значений '''

dict_ = {'red': {2012: 22, 2013: 33},
         'white': {2011: 13, 2012: 22, 2013: 16},
         'blue': {2011: 17, 2012: 27, 2013: 18}}
frame4 = pd.DataFrame(dict_)
print(f"\nDataFrame из вложенного списка:\n{frame4}")

'''                                         ● Транспонирование Dataframe
    При работе с табличным структурами данных иногда появляется необходимость выполнить операцию перестановки (сделать 
так, чтобы колонки стали рядами и наоборот). pandas позволяет добиться этого очень просто. Достаточно добавить 
атрибут T '''

print(f"\nТранспонирование:\n{frame4.T}")

'''                                         ● Сортировка 
Для сортировки данных в Pandas используются следующие методы: 
sort_index() - Сортировка по индексу; 
sort_values() - Сортировка по значению.
'''

'''                                         ● Очистка данных
Для этого существуют базовые функции:

●     drop_duplucates() удаляет дубликаты, то есть полностью идентичные строки.
●     fillna() заменяет пропуски NaN на какое-то значение, например на нули.
●     dropna() удаляет строки с NaN из таблицы.'''

'''                                         ● Обработка данных 
merge(): используется для объединения общих значений двух DataFrames вместе. 
groupby(): в основном собирает и представляет данные, группируя их по предоставленной категории. 
concat(): добавление одного DataFrame к другому.'''

'''  Обычно табличные данные хранятся в файлах. Такие наборы данных принято называть датасетами. Файлы с датасетом могут 
иметь различный формат. pandas поддерживает операции чтения и записи для: CSV, Excel 2007+, SQL, HTML, JSON, буфер 
обмена и др.

    Несколько примеров, как получить датасет из файлов разных форматов:

CSV. Используется функция read_csv(). Аргумент file является строкой, в которой записан путь до файла с датасетом. 
Для записи данных из DataFrame в CSV-файл используется метод to_csv(file).
Excel. Используется функция read_excel(). Для записи данных из DataFrame в Excel-файл используется метод to_excel().
JSON. Используется функция read_json(). Для записи данных из DataFrame в JSON используется метод to_json().'''

''' Cписок некоторых наиболее часто используемых функций для статистического анализа: 

Метод Description 
count() Подсчитывает количество всех непустых наблюдений 
sum() Возвращает сумму элементов данных. 
mean() Возвращает среднее значение всех элементов данных. 
median() Возвращает медианное значение всех элементов данных. 
mode() Возвращает режим всех элементов данных 
std() Возвращает стандартное отклонение всех элементов данных. 
min() Возвращает минимальный элемент данных среди всех входных элементов. 
max() Возвращает максимальный элемент данных среди всех входных элементов. 
abs() Возвращает абсолютное значение. 
prod() Возвращает произведение значений данных. 
cumsum() Возвращает кумулятивную сумму значений данных. 
cumprod() Возвращает совокупное произведение значений данных. 
describe() Он отображает статистическую сводку всех записей за один снимок, т.е. (сумма, количество, мин, среднее и т. Д.)
'''

'''                                             ● Визуализация данных 
    Данные, полученные в качестве выходных данных, могут быть лучше визуализированы путем нанесения данных на график. 
Чтобы построить и представить данные сначала нужно установить для них библиотеку matplotlib
'''
