from math import sqrt
from random import randint, choice

'''Задание №1'''


def sum_(list_):
    '''Функция, которая считает сумму
    чисел в списке'''
    total = 0
    for elem in list_:
        total += elem
    return total


my_list = [1, 34, 5, 7, 8, 10]
print(sum_(my_list))

# **********************************************************************************************************************
'''Задание №2'''


def is_year_leap(yer_):
    '''Функция, определяющая
    высокосный ли год и возвращает
    True или False'''
    return yer_ % 4 == 0 and yer_ % 100 != 0 or yer_ % 400 == 0


yer = int(input('Введите год: '))
print(is_year_leap(yer))

# **********************************************************************************************************************
'''Задание №3'''


def square(side):
    '''Функция, возвращающая кортеж из 3 значений: периметр,
    площадь и диагональ квадрата'''
    return side * 4, side ** 2, side * sqrt(2)


print(square(int(input('Введите сторону квадрата: '))))

# **********************************************************************************************************************
'''Задание №4'''


def season(month):
    '''Функция, принимающая номер месяца
    и возвращающая время года'''
    if month == 12 or 1 <= month <= 2:
        print('Зима')
    elif 3 <= month <= 5:
        print('Весна')
    elif 6 <= month <= 8:
        print('Лето')
    elif 9 <= month <= 11:
        print('Осень')
    else:
        print('Номер такого месяца не существует')


season(int(input('Введите номер месяца: ')))

# **********************************************************************************************************************
'''Задание №5'''


def is_prime(num):
    '''Функция принимает число от 0 до 1000
    и возвращает True, если оно простое
    и False, если состовное'''
    if num == 0 or num == 1:
        return 'Число не простое и не составное'
    else:
        flag = True  # Создаем метку для проверки числа на простоту
        for i in range(2, num):
            if num % i == 0:  # если исходное число делится на какое-либо отличное от 1 и самого себя
                flag = False  # если да, то завершаем цикл и возвращаем True или False
                break
        return flag


print(is_prime(int(input('Для проверки на простоту введите число от 0 до 1000: '))))

# **********************************************************************************************************************
'''Задание №6'''


def arithmetic_mean(list_):
    '''Функция, вычисляющая среднее
    арифметическое элементов списка'''
    return sum(list_) / len(list_)


n = 10
rand_list = [randint(1, 100) for _ in range(n)]
print('Элементы списка', *rand_list)
print(f'Среднее арифметическое элементов списка = {arithmetic_mean(rand_list)}')

# **********************************************************************************************************************
'''Домашнее задание'''


def sum_(a, b):
    '''Функция для возврата суммы двух чисел'''
    if a.isdigit() and b.isdigit():  # Проверяем, являются ли цифрами вводимые значения
        return f'{a} + {b} = {int(a) + int(b)}'
    else:
        return 'Некорректный ввод'


def minus(a, b):
    '''Функция для возврата разности двух чисел'''
    if a.isdigit() and b.isdigit():  # Проверяем, являются ли цифрами вводимые значения
        return f'{a} - {b} = {int(a) - int(b)}'
    else:
        return 'Некорректный ввод'


def multiply(a, b):
    '''Функция для возврата произведения двух чисел'''
    if a.isdigit() and b.isdigit():  # Проверяем, являются ли цифрами вводимые значения
        return f'{a} * {b} = {int(a) * int(b)}'
    else:
        return 'Некорректный ввод'


def divide(a, b):
    '''Функция для возврата деления двух чисел'''
    if a.isdigit() and b.isdigit():  # Проверяем, являются ли цифрами вводимые значения
        if int(b) == 0:  # Проверка деления на ноль
            return 'На ноль делить нельзя'
        else:
            return f'{a} / {b} = {int(a) / int(b)}'
    else:
        return 'Некорректный ввод'


def calculator(a, opr, b):
    if opr == '+':
        return sum_(a, b)
    elif opr == '-':
        return minus(a, b)
    elif opr == '*':
        return multiply(a, b)
    elif opr == '/':
        return divide(a, b)
    else:
        return 'Некорректный ввод'


is_progress = True  # Условие для цикла
while is_progress:
    # Объявлеям функцию с переданными аргументами для вывода результата в функию "print"
    print(
        calculator(input('Введите первое число: '), input('Введите операцию +-*/: '), input('Введите второе число: ')))
    # Меняем условие цикла, если хотим завершить программу
    is_progress = int(input('Введите "1" если хотите продолжить или "0" для завершения: '))
print('Программа завершена')

# **********************************************************************************************************************

'''Домашнее задание: Казино'''

print('''\tДобро пожаловать в наше казино! Ознакомьтесть с правилами игры:
Компьютер генерирует числа от 1 до 10 и два цвета: красный и черный.
Вам дается 5 попыток угадать номер и цвет, данные вводятся через пробел;
Пример: "7 черный" ''')


def check(comb, num, color):
    '''Функция проверяет корректность введенной комбинации'''
    return len(comb) == 2 and int(comb[0]) in num and comb[1] in color


def checking_winnings(comb, num, color):
    '''Функция проверяет выйгрышную комбинацию'''
    return int(comb[0]) == num and comb[1] == color


control_num = (range(1, 11))  # Кортеж чисел от 1-10 для проверки числа комбинации
list_colors = ['Черный', 'Красный']

# Переменные для условия цикла
attempt = 5
replay = 'да'

while attempt and replay == 'да':
    numbers = randint(1, 10)
    colors = choice(list_colors)
    combination = input('\nВведите комбинацию: ').title().split()  # Формируем список из введенной комбинации

    # Проверка введенных данных
    if check(combination, control_num, list_colors):
        if checking_winnings(combination, numbers, colors):
            print('\nВы угадали комбинацию')
            replay = input('Хотите повторить? "Да\Нет": ').lower()  # Если комбинация угадана, то предлагаем сыграть еще
            if replay == 'да':
                attempt = 5  # Обновляем попытки для продолжения игры
            else:
                break
        else:
            print(f'\nВыйгрышной была комбинация "{numbers} {colors}", может в следующий раз Вам повезет больше!')
            attempt -= 1
            if attempt:
                print(f'\nОставшиеся попытки: {attempt}')
            elif attempt == 0:
                # Если все попытки исчерпаны, то предлагаем сыграть еще
                replay = input('\nУ вас не осталось больше попыток, хотите повторить игру? "Да\Нет": ').lower()
                if replay == 'да':
                    attempt = 5  # Обновляем попытки для продолжения игры
                else:
                    break
    else:
        print('\nВы ввели некорректные данные, повторите ввод!')

print('\nИгра окончена!')
